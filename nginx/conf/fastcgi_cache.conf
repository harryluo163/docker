#===fastcgi_cache缓存配置====

#default off关闭缓存
fastcgi_cache fastcgi_cache; 
#1.11.10之后,允许启动后台子请求来更新过期的缓存项，而将过期的缓存响应返回给客户端。 请注意，有必要在更新时允许使用陈旧的缓存响应。
#fastcgi_cache_background_update on

#缓存以下HTTP METHOD请求
#fastcgi_cache_methods GET HEAD;

#至少访问几次才被缓存
fastcgi_cache_min_uses 1;

#set request defaut from pc
set $request_from 'pc';

if ($http_user_agent ~* '(up.browser|up.link|mmp|symbian|smartphone|midp|wap|phone|iphone|ipad|ipod|android|xoom)'){
    set $request_from 'mobile';
}

if ($http_user_agent ~* '^(w3c|acs-|alav|alca|amoi|audi|avan|benq|bird|blac|blaz|brew|cell|cldc|cmd-|dang|doco|eric|hipt|inno|ipaq|java|jigs|kddi|keji|leno|lg-c|lg-d|lg-g|lge-|maui|maxo|midp|mits|mmef|mobi|mot-|moto|mwbp|nec-|newt|noki|oper|palm|pana|pant|phil|play|port|prox|qwap|sage|sams|sany|sch-|sec-|send|seri|sgh-|shar|sie-|siem|smal|smar|sony|sph-|symb|t-mo|teli|tim-|tosh|tsm-|upg1|upsi|vk-v|voda|wap-|wapa|wapi|wapp|wapr|webc|winw|winw|xda|xda-).*'){
    set $request_from 'mobile';
}
#缓存key设置
fastcgi_cache_key "$scheme$request_method$request_from$server_name$server_port$request_uri";
#fastcgi_cache_lock on;
#fastcgi_cache_lock_age 5s;
#fastcgi_cache_lock_timeout 5s;

#缓存响应header状态200,缓存时间为5分钟
fastcgi_cache_valid 200 10m;
#响应404状态缓存1分钟
fastcgi_cache_valid 404      1m;
#不指定header状态,默认缓存200,301,302状态
#fastcgi_cache_valid 5m;
#缓存任意状态
#fastcgi_cache_valid any 1m;


#设置显示缓存状态是否命中,header头会显示如X-Cache: HIT(MISS,EXPIRED,UPDATING,STALE)等状态
#add_header X-Cache $upstream_cache_status;
add_header X-Cache 01$upstream_cache_status;

#正常情况header响应中有X-Accel-Expires,X-Accel-Limit-Rate,X-Accel-Buffering,X-Accel-Charset,Expires,Cache-Control,Set-Cookie,Vary,X-Accel-Redirect,nginx不会缓存,使用fastcgi_ignore_headers指令忽略以上header,来缓存cache
fastcgi_ignore_headers Cache-Control Expires Set-Cookie Vary;  

#与fastcgi服务器进行通信发生以下错误时(错误,超时,无效头,正在更新缓存,500,503),可以使用过期的缓存响应
fastcgi_cache_use_stale error timeout invalid_header updating http_500 http_503 ;

#默认缓存所有
set $no_cache 0;

#只缓存GET请求
if ($request_method != 'GET')
{
    set $no_cache 1;
}

#URL包含查询字符串不缓存(rewrite之后不能用此判断)
if ($query_string != "")
{
    #set $no_cache 1;
}
#包含指定的cookie不缓存
if ($http_cookie ~ "users_login_cookie") {
    set $no_cache 1;
} 
#uri包含?不缓存
if ($request_uri ~ "\?")
{
    set $no_cache 1;
}

#以下URL路径不缓存
if ($request_uri ~* "/(admin|administrator/|login.php)")
{
    set $no_cache 1;
}

#Don't cache if there is a cookie called PHPSESSID
if ($http_cookie = "PHPSESSID")
{
    set $no_cache 1;
}
#定义不会从缓存中获取响应的条件。如果字符串参数的至少一个值不为空，并且不等于“0”，则不会从缓存中获取响应：
fastcgi_cache_bypass $no_cache;
#不缓存满足条件的请求
fastcgi_no_cache $no_cache;
