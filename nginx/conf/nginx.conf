#nginx运行用户
user  nobody nobody;

#nginx进程数，建议按照cpu数目来指定，一般为它的倍数。
worker_processes  8;

#工作进程的最大打开文件数（RLIMIT_NOFILE）的限制。 
worker_rlimit_nofile 65535;

#nginx错误日志
error_log   /home/httplogs/error.log  notice;

#pid文件
pid        /usr/local/nginx/nginx.pid;

#event模块
events {
    use epoll;

    #一个worker进程同时打开的最大连接数量,该值不能超过worker_rlimit_nofile. (ulimit -n)
    worker_connections  65535;

    #惊群问题，如果启用了accept_mutex，则工作进程将轮流接受新的连接。 否则，将通知所有工作进程去争抢新连接。
    #在高并发时，推荐设置为off，这样可以充分发挥多进程优势
    #当系统支持EPOLLEXCLUSIVE或者使用reuseport时没必要开启accept_mutex选项
    #在1.11.3之后默认是off
    accept_mutex off; 
      
}

#http模块
http
{

    #===长连接keepalive setting===

    #设置keepalive长连接的空闲时间,第一个参数是服务端的空闲时间,默认是75s，第二个参数是响应header头中的Keep-Alive: 60时间。
    keepalive_timeout 75 60;
    #客户端可以通过单个keepalive连接进行的请求数。默认值为100，超过该值，将关闭连接。使用负载生成工具进行测试尤其有用，这通常会从单个客户端发送大量请求。
    keepalive_requests 100;


    #===sendfile setting=============
    #默认off
    sendfile on;

    #Default:  tcp_nopush off;要开启该选项，必须开启sendfile on
    tcp_nopush     on;
    
    #Default:  tcp_nodelay on;
    tcp_nodelay    on;
    
    #send_lowat     12000;


    #===请求连接相关限制limits setting===============


    #并发连接数限制
    #限制每个IP的并发连接数，设置一个缓存区大小为10m的大小，用来存放每个ip的相关状态(连接数)等。默认为空，不限制
    #一兆字节的区域可以保留约32000个32字节的状态或约16000个64字节的状态。 
    limit_conn_zone $binary_remote_addr zone=perip:10m;
    #限制服务器同时接受的并发连接数，设置10m缓存大小
    limit_conn_zone $server_name zone=perserver:10m;

    #速度限制,该限制是针对每个请求，如果同时有2个请求，则传输速率加倍。默认0，不限制
    #limit_rate,在传输500K之后,限制传输速率变为50K/s
    #limit_rate_after 500k;
    #limit_rate       50k;

    #请求的处理速率限制，默认为空，不限制
    #针对每个IP,限制每秒处理一个请求(针对一些登录页面等可以开启，防止机器批量攻击)
    #limit_req_zone $binary_remote_addr zone=perip:10m rate=1r/s;
    #限制服务器每秒处理10个请求
    #limit_req_zone $server_name zone=perserver:10m rate=10r/s;

    # 告诉nginx关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间。
    reset_timedout_connection on;

    #===缓冲区Buffer设置===
    #Default: client_body_buffer_size 8k|16k;
    client_body_buffer_size    256k;
    #Default: client_body_temp_path client_body_temp;
    #临时目录放入内存中
    client_body_temp_path    /dev/shm/client_body_temp 1 2;
    #header头缓冲区大小,默认1K
    client_header_buffer_size    8k;
    large_client_header_buffers    4 8k;
    #限制body的最大字节数，10m
    client_max_body_size       10m;

    #request_pool_size        4k;
    #connection_pool_size        512;

    #===超时timeout设置========
    #定义读取客户端请求头的超时。默认60s, 如果客户端在此时间内没有传输整个报头，则将408（请求超时）错误返回给客户端。
    client_header_timeout  30s;
    #定义读取客户端请求主体的超时时间。默认60s
    client_body_timeout    30s;
    #设置用于向客户端发送响应的超时。默认60s
    send_timeout           10s;


    #===Gzip压缩设置====
    gzip on;
    
    #压缩级别越高,越耗CPU资源
    gzip_comp_level 2;
    #针对代理请求开启压缩
    gzip_proxied any;
    gzip_types text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript;
    gzip_min_length 1000;

    #Default:  gzip_buffers 32 4k|16 8k;
    #gzip_buffers 16 8k;
    #禁止压缩User-Agent头中包含的正则字符匹配
    #gzip_disable regex "MSIE [4-6]\.";
    #Default: gzip_http_version 1.1;
    #gzip_http_version 1.1;

    #===openfile cache=====
    #open_file_cache 指令会对以下信息进行缓存：打开文件描述符的文件大小和修改时间信息;存在的目录信息;搜索文件的错误信息：文件不存在无权限读取等信息
    #max指定缓存数量   inactive是指经过多长时间文件没被请求后删除缓存
    open_file_cache          max=10240 inactive=20s;
    #指多长时间检查一次缓存的有效信息。也就是说即使一直访问这个文件，30s后会检查此文件的更改信息是否变化，发现变化就更新。
    open_file_cache_valid    30s;
    #指令open_file_cache中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件更改信息一直是在缓存中打开的。
    open_file_cache_min_uses 2;
    #缓存错误信息
    open_file_cache_errors   on;

    #设置fastcgi缓存保存目录,use_temp_path=on或忽略不写时,会使用fastcgi_temp_path设置的目录,否则使用当前目录,inactive表示在指定时间内没有访问的缓存数据将被移除,默认10m,一兆字节的区域可以存储约8,000个KEY密钥。
    #fastcgi_cache_path /dev/shm/fastcgi_cache levels=1:2 use_temp_path=off keys_zone=fastcgi_cache:100m inactive=10m max_size=10g;
    fastcgi_cache_path /dev/shm/fastcgi_cache levels=1:2 use_temp_path=off keys_zone=fastcgi_cache:100m inactive=10m ;
    fastcgi_temp_path /dev/shm/fastcgi_temp 1 2;




    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] $request '
    #                  '"$status" $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"'
    #                  '"$gzip_ratio"';

    log_format  main  '$remote_addr - $remote_user [$time_local] "$host:$server_port" "$request" '
                      '$status $body_bytes_sent "$request_body" "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" $request_time';

    log_format download   '$remote_addr - $remote_user [$time_local] '
                          '"$request" $status $bytes_sent '
                          '"$http_referer" "$http_user_agent" '
                          '"$http_range" "$sent_http_content_range"';

    ssi on;
    ssi_silent_errors on;
    ssi_types text/shtml;

    #隐藏nginx版本号
    server_tokens off;

    # void clickjacking
    add_header X-Frame-Options "SAMEORIGIN";

    # disable content-type sniffing
    add_header X-Content-Type-Options nosniff;

    # XSS filter
    add_header X-XSS-Protection "1; mode=block";

    #more_set_headers 'Server: Apache';
    #more_clear_headers 'X-Powered-By';
    #more_clear_headers 'Server';


    output_buffers   4 32k;
    postpone_output  1460;



    proxy_temp_path            /usr/local/nginx/proxy_temp;

    server_names_hash_bucket_size 128;


    # The following includes are specified for virtual hosts

    #include          vhosts/allsite/*.conf;
    include          vhosts/*.conf;
}
